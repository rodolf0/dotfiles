" Setup vim-plug (https://github.com/junegunn/vim-plug)
call plug#begin(has('nvim') ? expand("~/.config/nvim/bundle")
                            \ : expand("~/.vim/bundle"))
" Telescope
Plug 'nvim-lua/plenary.nvim' " required for Telescope
Plug 'kyazdani42/nvim-web-devicons' " Optional but nice
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' } " multiple words filter
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' } " TODO: check tag

" Aesthetics
Plug 'sainnhe/sonokai'
Plug 'itchyny/lightline.vim'

" Tree file explorer
Plug 'kyazdani42/nvim-tree.lua'

" Easy comments
Plug 'tpope/vim-commentary'
" Used for exchanging windows
Plug 't9md/vim-choosewin'
" Highlight jump targets for f F t T
Plug 'unblevable/quick-scope'
" Autoclose matching parenthesis/braces/etc
Plug 'Raimondi/delimitMate'
" Incremental visual-mode selection
Plug 'terryma/vim-expand-region'
" Match enhanced text-objects
Plug 'wellle/targets.vim'

" Syntax plugins
Plug 'rust-lang/rust.vim'
Plug 'hashivim/vim-terraform'
call plug#end()

" ############ Telescope ############
lua <<EOF
local actions = require('telescope.actions')
require("telescope").setup({
  defaults={
    mappings={
      i={ ["<esc>"]=actions.close, ["<C-u>"]=false, },
      n={ ["<esc>"]=actions.close, },
    },
  }
})
require('telescope').load_extension('fzf')
EOF
nnoremap <leader>fr :Telescope oldfiles<CR>
nnoremap <leader>fb :Telescope buffers<CR>
nnoremap <leader>ff :Telescope find_files<CR>
nnoremap <leader>fs :Telescope live_grep<CR>  " requires ripgrep
" ###################################


" ############ nvim-tree ############
lua <<EOF
require("nvim-tree").setup({
  on_attach=function(bufnr)
    local nt_api = require("nvim-tree.api")
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set("n", "<Esc>", nt_api.tree.close, bufopts)
  end,
  -- remove_keymaps={"<Tab>"},
})
EOF
" Mappings https://github.com/kyazdani42/nvim-tree.lua/blob/master/doc/nvim-tree-lua.txt#L1077
nnoremap <leader>e :NvimTreeFocus<CR>
" ###################################



" Better interaction with popup menu
" inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<TAB>"
" On <Tab> circle the menu if open, otherwise exit matched pair if in pair
inoremap <silent><expr> <Tab> pumvisible()
  \ ? "\<C-n>"
  \ : delimitMate#ShouldJump()
    \ ? delimitMate#JumpAny()
    \ : "\<TAB>"
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plug 'Raimondi/delimitMate'
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

colorscheme sonokai

" Plug 'tpope/vim-commentary'
nmap # gcc
vmap # gc

" Plug 't9md/vim-choosewin'
let g:choosewin_overlay_enable = 0
noremap <Leader>- :ChooseWinSwap<CR>

" Plug 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
let g:expand_region_text_objects = {
  \ 'iw'  :0, 'iW'  :0,
  \ 'i"'  :0, 'a"'  :0,
  \ 'i''' :0, 'a''' :0,
  \ 'i]'  :1, 'a]'  :1,
  \ 'ib'  :1, 'ab'  :1,
  \ 'iB'  :1, 'aB'  :1,
  \ 'ip'  :0,
  \ }
